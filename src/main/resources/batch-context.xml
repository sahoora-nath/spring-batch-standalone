<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
 
 	<import resource="classpath:datasource.xml"/>
 	
 	<!-- JobRepository and JobLauncher -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />
 
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
    
    <!-- ItemReader which reads data from XML file -->
    <bean id="xmlItemReader" class="org.springframework.batch.item.xml.StaxEventItemReader">
 
        <property name="resource" value="classpath:students.xml" />
 
        <property name="fragmentRootElementName" value="Student" />
 
        <property name="unmarshaller">
            <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
                <property name="classesToBeBound">
                    <list>
                        <value>com.sahoo.spring.batch.standalone.example.model.Student</value>
                    </list>
                </property>
            </bean>
        </property>
    </bean>
 
    <!-- ItemWriter which writes data to database -->
    <bean id="databaseItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource" />
        <property name="sql">
            <value>
                <![CDATA[        
                    insert into STUDENTS_RESULT(LAST_UPDATED_DATE, STUDENT_NAME, DOB, PERCENTAGE) 
                    values (NOW(), ?, ?, ?)
                ]]>
            </value>
        </property>
 
        <!-- We need a custom setter to handle the conversion between Jodatime LocalDate and MySQL DATE -->
        <property name="ItemPreparedStatementSetter">
            <bean class="com.sahoo.spring.batch.standalone.example.batch.StudentItemPreparedStatementSetter" />
        </property>
  </bean>
 
    <!-- Optional ItemProcessor to perform business logic/filtering on the input records -->
    <bean id="itemProcessor" class="com.sahoo.spring.batch.standalone.example.batch.StudentItemProcessor" />
 
    <!-- Optional JobExecutionListener to perform business logic before and after the job -->
    <bean id="jobListener" class="com.sahoo.spring.batch.standalone.example.batch.listener.StudentJobListener"/>
    
    <bean id="skipListener" class="com.sahoo.spring.batch.standalone.example.batch.listener.StudentSkipListener" >
    	<property name="errorItemWriter" ref="errorItemWriter"/>
    </bean>
    <bean id="writeListener" class="com.sahoo.spring.batch.standalone.example.batch.listener.StudentWriteListener">
    	<property name="successItemWriter" ref="successItemWriter"/>
    </bean>
    
    <!-- Step will need a transaction manager -->
    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
 
    <!-- Batch Job -->
    <batch:job id="studentsJob" restartable="true">
        <batch:step id="step1">
            <batch:tasklet transaction-manager="transactionManager">                
                
                <batch:chunk reader="xmlItemReader" writer="databaseItemWriter"
                    processor="itemProcessor" commit-interval="1" skip-limit="2">
                     <batch:streams>
                     	<batch:stream ref="errorItemWriter"/>
                     	<batch:stream ref="successItemWriter"/>
                     </batch:streams>
	                 <batch:skippable-exception-classes>
	            		<batch:include class="java.lang.Exception"/>
	            		<batch:exclude class="java.io.FileNotFoundException"/>
	         		 </batch:skippable-exception-classes>
	         		 <batch:listeners>
            			<batch:listener ref="skipListener" />
            			<batch:listener ref="writeListener" />
        			</batch:listeners>
         		</batch:chunk>
         		
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="jobListener" />
        </batch:listeners>
    </batch:job>

	<bean id="errorItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
	    <property name="resource" value="file:error/students_failed.xml" />
	    <property name="encoding" value="ISO-8859-1" />
	    <property name="version" value="1.0" />
	    <property name="marshaller">
	    	<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
	     		<property name="classesToBeBound">
	     			<list>
	       				<value>com.sahoo.spring.batch.standalone.example.model.Student</value>
	    			</list>
	    		</property>
	  		</bean>
	    </property>
	    <property name="headerCallback" ref="studentXMLHeaderCallBack" />
	    <property name="footerCallback" ref="studentXMLFooterCallBack"/>
	    <property name="rootTagName" value="StudentsList" />
 	</bean>
 	
 	<bean id="successItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
	    <property name="resource" value="file:archived/students_processed.xml" />
	    <property name="encoding" value="ISO-8859-1" />
	    <property name="version" value="1.0" />
	    <property name="marshaller">
	    	<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
	     		<property name="classesToBeBound">
	     			<list>
	       				<value>com.sahoo.spring.batch.standalone.example.model.Student</value>
	    			</list>
	    		</property>
	  		</bean>
	    </property>
	    <property name="headerCallback" ref="studentXMLHeaderCallBack" />
	    <property name="footerCallback" ref="studentXMLFooterCallBack"/>
	    <property name="rootTagName" value="StudentsList" />
 	</bean>
 	
	<bean id="studentXMLHeaderCallBack" class ="com.sahoo.spring.batch.standalone.example.batch.writer.StudentXMLHeaderCallBack"/>
	<bean id="studentXMLFooterCallBack" class ="com.sahoo.spring.batch.standalone.example.batch.writer.StudentXMLFooterCallBack"/> 
	
</beans>   